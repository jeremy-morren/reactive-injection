//HintName: treeViewModelFactory.g.cs
//This file was automatically generated by the ReactiveInjection source generator.
//Do not edit this file manually since it will be automatically overwritten.
#nullable disable
namespace Tree
{
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    partial class ViewModelFactory
    {
        private readonly global::Tree.Service treeService; //Dependency injected service
        private readonly global::System.IServiceProvider systemIServiceProvider; //Dependency injected service
        private readonly global::System.Collections.Generic.List<int> systemCollectionsGenericList_int; //Dependency injected service
        private readonly global::System.Collections.Generic.List<int[]> systemCollectionsGenericList_intArray; //Dependency injected service

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ViewModelFactory(global::Tree.Service treeService, global::System.IServiceProvider systemIServiceProvider, global::System.Collections.Generic.List<int> systemCollectionsGenericList_int, global::System.Collections.Generic.List<int[]> systemCollectionsGenericList_intArray)
        {
            this.treeService = treeService;
            this.systemIServiceProvider = systemIServiceProvider;
            this.systemCollectionsGenericList_int = systemCollectionsGenericList_int;
            this.systemCollectionsGenericList_intArray = systemCollectionsGenericList_intArray;
        }

        private readonly global::Tree.SharedState treeSharedState = new global::Tree.SharedState(); //Shared state

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public partial global::Tree.ParentViewModel NewParent()
        {
            return new global::Tree.ParentViewModel(this.treeSharedState, this, this.treeService, this.systemIServiceProvider);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public partial global::Tree.ChildViewModel NewChild(Tree.Model model)
        {
            return new global::Tree.ChildViewModel(this.treeSharedState, model, this.treeService, this.systemCollectionsGenericList_int, this.systemCollectionsGenericList_intArray);
        }
    }
}
