//HintName: ReactiveInjection.Tests.ModelInjection.InjectedViewModel1.g.cs
// <auto-generated/>
// This file was automatically generated by the ReactiveInjection source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All
#nullable enable
using ReactiveUI;
namespace ReactiveInjection.Tests.ModelInjection
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
    partial class InjectedViewModel1
    {
        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        public int? Int
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get => this.Model1?.Int;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        public bool? InitRequired
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get => this.Model1?.InitRequired;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        protected void SetModel3(global::ReactiveInjection.Tests.ModelInjection.Model3 value)
        {
            if (value == null)
            {
                throw new ArgumentNullException("value");
            }
            if (object.ReferenceEquals(this.Model3, value))
            {
                return;
            }
            List<string> changed = new List<string>(capacity: 4);
            if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(this.Model3?.RequiredInit, value.RequiredInit))
            {
                changed.Add("RequiredInit");
                this.RaisePropertyChanging(propertyName: "RequiredInit");
            }
            if (!global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.Model3?.GetOnly, value.GetOnly))
            {
                changed.Add("GetOnly");
                this.RaisePropertyChanging(propertyName: "GetOnly");
            }
            if (!global::System.Collections.Generic.EqualityComparer<double?>.Default.Equals(this.Model3?.Required, value.Required))
            {
                changed.Add("Required");
                this.RaisePropertyChanging(propertyName: "Required");
            }
            if (!global::System.Collections.Generic.EqualityComparer<global::ReactiveInjection.Tests.ModelInjection.Model2>.Default.Equals(this.Model3?.M3ClassProp, value.M3ClassProp))
            {
                changed.Add("M3ClassProp");
                this.RaisePropertyChanging(propertyName: "M3ClassProp");
            }
            this.RaisePropertyChanging(propertyName: "Model3");
            this.Model3 = value;
            this.RaisePropertyChanged(propertyName: "Model3");
            foreach (string prop in changed)
            {
                this.RaisePropertyChanged(propertyName: prop);
            }
        }


        ///<summary>
        ///    This is a comment
        ///    </summary>
        ///<remarks>These are remarks</remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public string RequiredInit
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.RequiredInit;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public string? GetOnly
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.GetOnly;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public double Required
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.Required;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            set
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }

                if (global::System.Collections.Generic.EqualityComparer<double>.Default.Equals(this.Model3.Required, value))
                {
                    return;
                }
                this.RaisePropertyChanging(propertyName: "Required");
                this.RaisePropertyChanging(propertyName: "Model3");
                Model3.Required = value;
                this.RaisePropertyChanged(propertyName: "Required");
                this.RaisePropertyChanged(propertyName: "Model3");
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public global::ReactiveInjection.Tests.ModelInjection.Model2? M3ClassProp
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.M3ClassProp;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            set
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }

                if (global::System.Collections.Generic.EqualityComparer<global::ReactiveInjection.Tests.ModelInjection.Model2>.Default.Equals(this.Model3.M3ClassProp, value))
                {
                    return;
                }
                this.RaisePropertyChanging(propertyName: "M3ClassProp");
                this.RaisePropertyChanging(propertyName: "Model3");
                Model3.M3ClassProp = value;
                this.RaisePropertyChanged(propertyName: "M3ClassProp");
                this.RaisePropertyChanged(propertyName: "Model3");
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        protected void SetModel4(global::ReactiveInjection.Tests.ModelInjection.Model4? value)
        {
            if (object.ReferenceEquals(this.Model4, value))
            {
                return;
            }
            List<string> changed = new List<string>(capacity: 3);
            if (!global::System.Collections.Generic.EqualityComparer<int?>.Default.Equals(this.Model4?.Constructed, value.Constructed))
            {
                changed.Add("Constructed");
                this.RaisePropertyChanging(propertyName: "Constructed");
            }
            if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(this.Model4?.OtherProperty, value.OtherProperty))
            {
                changed.Add("OtherProperty");
                this.RaisePropertyChanging(propertyName: "OtherProperty");
            }
            if (!global::System.Collections.Generic.EqualityComparer<global::ReactiveInjection.Tests.ModelInjection.Model2>.Default.Equals(this.Model4?.M4ClassProp, value.M4ClassProp))
            {
                changed.Add("M4ClassProp");
                this.RaisePropertyChanging(propertyName: "M4ClassProp");
            }
            this.RaisePropertyChanging(propertyName: "Model4");
            this.Model4 = value;
            this.RaisePropertyChanged(propertyName: "Model4");
            foreach (string prop in changed)
            {
                this.RaisePropertyChanged(propertyName: prop);
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        private void init_Model4()
        {
            if (this.Model4 != null)
            {
                return;
            }
            this.Model4 = new global::ReactiveInjection.Tests.ModelInjection.Model4(default(int?)!)
            {
                OtherProperty = default(string)!,
            };
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public int? Constructed
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get => this.Model4?.Constructed;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public string OtherProperty
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get => this.Model4?.OtherProperty;
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            set
            {
                init_Model4();
                if (global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.Model4.OtherProperty, value))
                {
                    return;
                }
                this.RaisePropertyChanging(propertyName: "OtherProperty");
                this.RaisePropertyChanging(propertyName: "Model4");
                Model4.OtherProperty = value;
                this.RaisePropertyChanged(propertyName: "OtherProperty");
                this.RaisePropertyChanged(propertyName: "Model4");
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
        public global::ReactiveInjection.Tests.ModelInjection.Model2 M4ClassProp
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            get => this.Model4?.M4ClassProp;
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
            set
            {
                init_Model4();
                if (global::System.Collections.Generic.EqualityComparer<global::ReactiveInjection.Tests.ModelInjection.Model2>.Default.Equals(this.Model4.M4ClassProp, value))
                {
                    return;
                }
                this.RaisePropertyChanging(propertyName: "M4ClassProp");
                this.RaisePropertyChanging(propertyName: "Model4");
                Model4.M4ClassProp = value;
                this.RaisePropertyChanged(propertyName: "M4ClassProp");
                this.RaisePropertyChanged(propertyName: "Model4");
            }
        }

    }
}
