//HintName: Models.ModelItems.InjectedViewModel1.g.cs
// <auto-generated/>
// This file was automatically generated by the ReactiveInjection source generator.
// Do not edit this file manually since it will be automatically overwritten.
#nullable enable
namespace Models.ModelItems
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection", "1.0.0.0")]
    partial class InjectedViewModel1
    {
        public int? Int
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get => this.Model1?.Int;
        }

        public bool? InitRequired
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get => this.Model1?.InitRequired;
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.MethodImplOptions(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        protected void SetModel3(global::Models.ModelItems.Model3 value)
        {
            if (value == null) { throw new ArgumentNullException("value"); }
            if (object.ReferenceEquals(this.Model3, value)) { return; }
            List<string> changed = new List<string>(capacity: 4)
            if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(this.Model3?.RequiredInit, value.RequiredInit))
            {
                changed.Add("RequiredInit");
                this.RaisePropertyChanging("RequiredInit");
            }
            if (!global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.Model3?.GetOnly, value.GetOnly))
            {
                changed.Add("GetOnly");
                this.RaisePropertyChanging("GetOnly");
            }
            if (!global::System.Collections.Generic.EqualityComparer<double?>.Default.Equals(this.Model3?.Required, value.Required))
            {
                changed.Add("Required");
                this.RaisePropertyChanging("Required");
            }
            if (!global::System.Collections.Generic.EqualityComparer<global::Models.ModelItems.Model4>.Default.Equals(this.Model3?.Class, value.Class))
            {
                changed.Add("Class");
                this.RaisePropertyChanging("Class");
            }
            this.RaisePropertyChanging("Model3");
            this.Model3 = value;
            this.RaisePropertyChanged("Model3");
            foreach (string prop in changed) { this.RaisePropertyChanged(prop); }
        }


        ///<summary>
        ///    This is a comment
        ///    </summary>
        ///<remarks>These are remarks</remarks>
        public string RequiredInit
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.RequiredInit;
            }
        }

        public string GetOnly
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.GetOnly;
            }
        }

        public double Required
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.Required;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }

                if (global::System.Collections.Generic.EqualityComparer<double>.Default.Equals(this.Model3.Required, value)) { return; }
                this.RaisePropertyChanging("Required");
                this.RaisePropertyChanging("Model3");
                Model3.Required = value;
                this.RaisePropertyChanged("Model3");
                this.RaisePropertyChanged("Required");
            }
        }

        public global::Models.ModelItems.Model4 Class
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }
                return this.Model3.Class;
            }
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                if (this.Model3 == null!)
                {
                    throw new InvalidOperationException("Backing model Model3 is null");
                }

                if (global::System.Collections.Generic.EqualityComparer<global::Models.ModelItems.Model4>.Default.Equals(this.Model3.Class, value)) { return; }
                this.RaisePropertyChanging("Class");
                this.RaisePropertyChanging("Model3");
                Model3.Class = value;
                this.RaisePropertyChanged("Model3");
                this.RaisePropertyChanged("Class");
            }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.MethodImplOptions(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        protected void SetModel4(global::Models.ModelItems.Model4? value)
        {
            if (object.ReferenceEquals(this.Model4, value)) { return; }
            List<string> changed = new List<string>(capacity: 2)
            if (!global::System.Collections.Generic.EqualityComparer<int?>.Default.Equals(this.Model4?.Constructed, value.Constructed))
            {
                changed.Add("Constructed");
                this.RaisePropertyChanging("Constructed");
            }
            if (!global::System.Collections.Generic.EqualityComparer<string?>.Default.Equals(this.Model4?.OtherProperty, value.OtherProperty))
            {
                changed.Add("OtherProperty");
                this.RaisePropertyChanging("OtherProperty");
            }
            this.RaisePropertyChanging("Model4");
            this.Model4 = value;
            this.RaisePropertyChanged("Model4");
            foreach (string prop in changed) { this.RaisePropertyChanged(prop); }
        }

        [global::System.Diagnostics.DebuggerStepThroughAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Runtime.CompilerServices.MethodImplOptions(System.Runtime.CompilerServices.MethodImplOptions.Synchronized)]
        private void init_Model4()
        {
            if (this.Model4 != null!) { return; }
            this.Model4 = new global::Models.ModelItems.Model4(default(int?)!)
            {
                OtherProperty = default(string)!,
            };
        }

        public int? Constructed
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get => this.Model4?.Constructed;
        }

        public string? OtherProperty
        {
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get => this.Model4?.OtherProperty;
            [global::System.Diagnostics.DebuggerStepThroughAttribute()]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                init_Model4();

                if (global::System.Collections.Generic.EqualityComparer<string>.Default.Equals(this.Model4.OtherProperty, value)) { return; }
                this.RaisePropertyChanging("OtherProperty");
                this.RaisePropertyChanging("Model4");
                Model4.OtherProperty = value;
                this.RaisePropertyChanged("Model4");
                this.RaisePropertyChanged("OtherProperty");
            }
        }

    }
}
