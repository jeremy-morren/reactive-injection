//HintName: ReactiveInjection.GeneratorTests.ReactiveLoaderManager.g.cs
// <auto-generated/>
// This file was automatically generated by the ReactiveInjection source generator.
// Do not edit this file manually since it will be automatically overwritten.
// ReSharper disable All
#nullable disable

using Microsoft.Extensions.Logging;

namespace ReactiveInjection.Loader
{
    [global::System.Diagnostics.DebuggerStepThroughAttribute()]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ReactiveInjection.SourceGenerator", "1.0.0.0")]
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal class ReactiveLoaderManager : global::ReactiveInjection.Loader.ReactiveLoaderManagerBase, global::ReactiveInjection.Loader.IReactiveLoaderManager
    {
        private readonly global::Tree.Models.ViewModel3 _service0;
        private readonly global::Tree.Models.ViewModel4 _service1;
        private readonly global::System.IServiceProvider _service2;

        public ReactiveLoaderManager(global::Tree.Models.ViewModel3 service0, global::Tree.Models.ViewModel4 service1, global::System.IServiceProvider service2)
        {
            this._service0 = service0;
            this._service1 = service1;
            this._service2 = service2;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::ReactiveInjection.Loader.IReactiveViewModelLoader> Loaders => new global::ReactiveInjection.Loader.IReactiveViewModelLoader[]
        {
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel1),
                "Create",
                new Type[] { typeof(long), typeof(string), typeof(global::Tree.Models.ViewModel3), typeof(global::Tree.Models.ViewModel2), typeof(global::System.Threading.CancellationToken) },
                "VM1/{id}",
                this,
                static s => s.Length == 2 && s[0].Equals("VM1", StringComparison.OrdinalIgnoreCase) && long.TryParse(s[1], out _),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel1.Create(long.Parse(r[1]), q.GetValues("name")?.FirstOrDefault(), m._service0, GetParameter<global::Tree.Models.ViewModel2>(p, "vm2"), ct))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel1),
                "Create2",
                new Type[] { typeof(bool), typeof(string), typeof(global::Tree.Models.ViewModel3), typeof(global::System.Runtime.Serialization.ISerializable), typeof(global::System.Threading.CancellationToken) },
                "VM\"1/{id}",
                this,
                static s => s.Length == 2 && s[0].Equals("VM\"1", StringComparison.OrdinalIgnoreCase) && bool.TryParse(s[1], out _),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel1.Create2(bool.Parse(r[1]), q.GetValues("other\"")?.FirstOrDefault(), m._service0, GetParameter<global::System.Runtime.Serialization.ISerializable>(p, "owner"), ct))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel2),
                "CreateFromRoute",
                new Type[] { typeof(global::Tree.Models.ViewModel3), typeof(global::Tree.Models.ViewModel4), typeof(global::System.Threading.CancellationToken) },
                "VM2",
                this,
                static s => s.Length == 1 && s[0].Equals("VM2", StringComparison.OrdinalIgnoreCase),
                static (m, r, q, p, ct) => global::System.Threading.Tasks.Task.FromResult<object>(global::Tree.Models.ViewModel2.CreateFromRoute(GetParameter<global::Tree.Models.ViewModel3>(p, "vm"), m._service1, ct))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel3),
                "Load",
                new Type[] { typeof(decimal?), typeof(string), typeof(global::System.IServiceProvider), typeof(global::System.Threading.CancellationToken) },
                "VM3/{name}/{id?}",
                this,
                static s => (s.Length == 3 || s.Length == 2) && s[0].Equals("VM3", StringComparison.OrdinalIgnoreCase) && (s.Length <= 2 || string.IsNullOrEmpty(s[2]) || decimal.TryParse(s[2], out _)),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel3.Load(r.Length <= 2 || string.IsNullOrEmpty(r[2]) ? default(decimal?) : decimal?.Parse(r[2]), r[1], m._service2, ct))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel3),
                "LoadStrongId",
                new Type[] { typeof(global::Tree.Models.StrongId), typeof(string) },
                "VM5/StrongId/{id}/{name}",
                this,
                static s => s.Length == 4 && s[0].Equals("VM5", StringComparison.OrdinalIgnoreCase) && s[1].Equals("StrongId", StringComparison.OrdinalIgnoreCase) && global::Tree.Models.StrongId.TryParse(s[2], global::System.Globalization.CultureInfo.InvariantCulture, out _),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel3.LoadStrongId(global::Tree.Models.StrongId.Parse(r[2], global::System.Globalization.CultureInfo.InvariantCulture), r[3]))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel4),
                "Load",
                new Type[] { typeof(int), typeof(long) },
                "VM4/{id}/{name}",
                this,
                static s => s.Length == 3 && s[0].Equals("VM4", StringComparison.OrdinalIgnoreCase) && int.TryParse(s[1], out _) && long.TryParse(s[2], out _),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel4.Load(int.Parse(r[1]), long.Parse(r[2])))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel4),
                "LoadGeneratedStrongId",
                new Type[] { typeof(global::Tree.Models.GeneratedStrongId) },
                "VM4/{id}",
                this,
                static s => s.Length == 2 && s[0].Equals("VM4", StringComparison.OrdinalIgnoreCase) && global::Tree.Models.GeneratedStrongId.TryParse(s[1], global::System.Globalization.CultureInfo.InvariantCulture, out _),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel4.LoadGeneratedStrongId(global::Tree.Models.GeneratedStrongId.Parse(r[1], global::System.Globalization.CultureInfo.InvariantCulture)))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel5),
                "Load",
                new Type[] { typeof(string), typeof(global::Tree.Models.ViewModel3), typeof(global::System.Threading.CancellationToken) },
                "{Token?}",
                this,
                static s => (s.Length == 1 || s.Length == 0),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel5.Load(r.Length <= 0 || string.IsNullOrEmpty(r[0]) ? default(string) : r[0], m._service0, ct))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel5),
                "Load",
                new Type[] { typeof(string), typeof(string) },
                "VM5/{Param2}/{Token?}",
                this,
                static s => (s.Length == 3 || s.Length == 2) && s[0].Equals("VM5", StringComparison.OrdinalIgnoreCase),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel5.Load(r[1], r.Length <= 2 || string.IsNullOrEmpty(r[2]) ? default(string) : r[2]))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel5),
                "Load",
                new Type[] { typeof(uint?) },
                "VM5/{Param?}",
                this,
                static s => (s.Length == 2 || s.Length == 1) && s[0].Equals("VM5", StringComparison.OrdinalIgnoreCase) && (s.Length <= 1 || string.IsNullOrEmpty(s[1]) || uint.TryParse(s[1], out _)),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel5.Load(r.Length <= 1 || string.IsNullOrEmpty(r[1]) ? default(uint?) : uint?.Parse(r[1])))),
            new global::ReactiveInjection.Loader.ReactiveViewModelLoader<ReactiveLoaderManager>(
                typeof(global::Tree.Models.ViewModel5),
                "LoadStrongId",
                new Type[] { typeof(global::Tree.Models.StrongId?) },
                "VM5/StrongId/{id?}",
                this,
                static s => (s.Length == 3 || s.Length == 2) && s[0].Equals("VM5", StringComparison.OrdinalIgnoreCase) && s[1].Equals("StrongId", StringComparison.OrdinalIgnoreCase) && (s.Length <= 2 || string.IsNullOrEmpty(s[2]) || global::Tree.Models.StrongId.TryParse(s[2], global::System.Globalization.CultureInfo.InvariantCulture, out _)),
                static async (m, r, q, p, ct) => (object)(await global::Tree.Models.ViewModel5.LoadStrongId(r.Length <= 2 || string.IsNullOrEmpty(r[2]) ? default(global::Tree.Models.StrongId?) : global::Tree.Models.StrongId.Parse(r[2], global::System.Globalization.CultureInfo.InvariantCulture)))),
        };

    }
}
