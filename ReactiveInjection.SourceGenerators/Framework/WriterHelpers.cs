using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using ReactiveInjection.SourceGenerators.Symbols;

namespace ReactiveInjection.SourceGenerators.Framework;

internal static class WriterHelpers
{
    public static void WriteFileHeader(this IndentedWriter writer, string nullable)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("// This file was automatically generated by the ReactiveInjection source generator.");
        writer.WriteLine("// Do not edit this file manually since it will be automatically overwritten.");
        writer.WriteLine("// ReSharper disable All");
        writer.WriteLine($"#nullable {nullable}");
        
        writer.WriteLine();

        writer.WriteLine("using Microsoft.Extensions.Logging;");
        
        writer.WriteLine();
    }
    
    public static void WriteAttributes(this IndentedWriter writer, EditorBrowsableState? editorBrowsableState = null)
    {
        writer.WriteLine($"[global::{typeof(DebuggerStepThroughAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(DebuggerNonUserCodeAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(ExcludeFromCodeCoverageAttribute).FullName}]");
        writer.WriteLine($"[global::{typeof(GeneratedCodeAttribute).FullName}(\"ReactiveInjection.SourceGenerator\", \"{Version}\")]");
        if (editorBrowsableState.HasValue)
            writer.WriteLine($"[global::{typeof(EditorBrowsableAttribute).FullName}(global::{typeof(EditorBrowsableState).FullName}.{editorBrowsableState})]");
    }

    private static Version Version => typeof(WriterHelpers).Assembly.GetName().Version;
    
    /// <summary>
    /// Writes a one-liner statement i.e. <c>{ content }</c>
    /// </summary>
    /// <param name="writer"></param>
    /// <param name="content"></param>
    public static void WriteOneLiner(this IndentedWriter writer, string content)
    {
        writer.WriteLineThenPush('{');
        writer.WriteLine(content);
        writer.PopThenWriteLine('}');
    }
    
    /// <summary>
    /// Writes an if statement i.e. <c>if (condition) { line; line;  }</c>
    /// </summary>
    public static void WriteIfStatement(this IndentedWriter writer, string condition, params string[] lines)
    {
        writer.WriteLine($"if ({condition})");
        writer.WriteLineThenPush('{');
        foreach (var l in lines)
            writer.WriteLine(l);
        writer.PopThenWriteLine('}');
    }

    public static void WritePartialTypeDefinition(this IndentedWriter writer, IType type)
    {
        //Build list of types
        var types = new List<IType>() { type};
        var parent = type.ContainingType;
        while (true)
        {
            if (parent == null)
                break;
            types.Add(parent);
            parent = parent.ContainingType;
        }

        //Write them in reverse
        types.Reverse();
        
        writer.WriteLine($"namespace {types[0].Namespace}");
        writer.WriteLineThenPush('{');
        foreach (var p in types)
        {
            writer.WriteAttributes();
            writer.WriteLine($"partial class {p.Name}");
            writer.WriteLineThenPush('{');
        }
    }

    public static void PopAll(this IndentedWriter writer)
    {
        while (writer.CurrentIndentLevel > 0)
            writer.PopThenWriteLine('}');
    }
}